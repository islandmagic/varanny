name: Build and Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.21.4

      - name: Set up MinGW
        uses: egor-tensin/setup-mingw@v2

      - name: Build and Release
        id: build_and_release
        run: |
          for os in linux windows; do
            if [ "$os" == "linux" ]; then
              architectures=(amd64)
            else
              architectures=(amd64)
            fi
            
            for arch in "${architectures[@]}"; do
              extension=""
              if [ "$os" == "windows" ]; then
                extension=".exe"
              fi
              
              binary_name="varanny${extension}"
              zip_name="${binary_name}-${os}-${arch}.zip"
              
              if [ "$os" == "windows" ]; then              
                CC=x86_64-w64-mingw32-gcc GOOS=$os GOARCH=$arch CGO_ENABLED=1 go build -o "$binary_name" -v ./...
              else
                GOOS=$os GOARCH=$arch CGO_ENABLED=1 go build -o "$binary_name" -v ./...
              fi

              zip "$zip_name" "$binary_name" "varanny.json"
              
              echo "::set-output name=binary_name::$binary_name"
              echo "::set-output name=zip_name::$zip_name"
            done
          done
          
          echo "::set-output name=os::${{ matrix.os }}"
          echo "::set-output name=arch::${{ matrix.arch }}"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        id: upload_release_assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: "*.zip"